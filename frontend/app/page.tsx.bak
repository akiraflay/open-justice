"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useToast } from "@/hooks/use-toast"
import Sidebar from "@/components/sidebar"
import { FavoritesModal } from "@/components/favorites-modal"
import {
  Upload,
  Send,
  FileText,
  Video,
  Music,
  ImageIcon,
  ChevronLeft,
  ChevronRight,
  Search,
  Plus,
  X,
  Mic,
  BarChart3,
} from "lucide-react"

interface UploadedFile {
  id: string
  name: string
  type: string
  size: string
  uploadedAt: Date
  isTranscribing?: boolean
  transcriptionProgress?: number
}

interface Query {
  id: string
  text: string
  status: "pending" | "processing" | "completed"
  sessionId: string
  fileResults?: Array<{
    fileId: string
    fileName: string
    result: string
    status: "pending" | "processing" | "anti-hallucination" | "completed"
    progress: number
  }>
  summary?: string
  combinedAnalysisRequested: boolean
  combinedAnalysisProgress: number
}

interface QueryInput {
  id: string
  text: string
}

interface ExtractedQuery {
  id: string
  text: string
  questionNumber: number
}

type QueryMode = "auto" | "manual"
type QueryState = "input" | "extracted" | "submitted"

type RecordingState = "idle" | "recording" | "processing"

const LegalCaseAnalysis = () => {
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])
  const [queries, setQueries] = useState<Query[]>([])
  const [queryInputs, setQueryInputs] = useState<QueryInput[]>([
    { id: Math.random().toString(36).substr(2, 9), text: "" },
  ])
  const [queryMode, setQueryMode] = useState<QueryMode>("auto")
  const [queryState, setQueryState] = useState<QueryState>("input")
  const [extractedQueries, setExtractedQueries] = useState<ExtractedQuery[]>([])
  const [displayedText, setDisplayedText] = useState("")
  const [recordingState, setRecordingState] = useState<RecordingState>("idle")
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const { toast } = useToast()

  const [processingSourceIds, setProcessingSourceIds] = useState<Set<string>>(new Set())
  const [favoritesModalOpen, setFavoritesModalOpen] = useState(false)

  const removeFile = (fileId: string) => {
    setUploadedFiles((prev) => prev.filter((file) => file.id !== fileId))
  }

  const extractQueries = (text: string): ExtractedQuery[] => {
    // Mock extraction logic - in real implementation, this would use AI/NLP
    const mockQueries = [
      "What are the key facts surrounding the incident in question?",
      "What evidence supports the defendant's claims in this case?",
      "Are there any procedural issues that could affect the outcome?",
      "What precedents are most relevant to this legal matter?",
      "What are the potential defenses available to the client?",
    ]

    // Return 2-4 random queries for demo purposes
    const numQueries = Math.floor(Math.random() * 3) + 2
    return mockQueries.slice(0, numQueries).map((query, index) => ({
      id: Math.random().toString(36).substr(2, 9),
      text: query,
      questionNumber: index + 1,
    }))
  }

  const ProcessingBar: React.FC<{ progress: number; status: string }> = ({ progress, status }) => {
    if (status === "pending" || status === "completed") return null

    return (
      <div className="flex items-center gap-2 ml-auto">
        <div className="w-16 h-1 bg-muted rounded-full overflow-hidden">
          <div className="h-full bg-primary transition-all duration-300 ease-out" style={{ width: `${progress}%` }} />
        </div>
        <span className="text-xs text-muted-foreground font-mono min-w-[32px]">{progress}%</span>
      </div>
    )
  }

  const CombinedAnalysisBar: React.FC<{ progress: number }> = ({ progress }) => {
    return (
      <div className="flex items-center gap-2">
        <div className="w-24 h-1 bg-muted rounded-full overflow-hidden">
          <div className="h-full bg-primary transition-all duration-300 ease-out" style={{ width: `${progress}%` }} />
        </div>
        <span className="text-xs text-muted-foreground font-mono min-w-[32px]">{progress}%</span>
      </div>
    )
  }

  const isTranscribableFile = (fileType: string) => {
    return fileType === "audio" || fileType === "video"
  }

  const getFileIcon = (type: string, isTranscribing?: boolean, progress?: number) => {
    switch (type) {
      case "pdf":
        return <FileText className="h-4 w-4" />
      case "audio":
        if (isTranscribing) {
          return (
            <div className="relative h-4 w-4">
              <div className="absolute inset-0 animate-spin">
                <div className="h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
              </div>
            </div>
          )
        }
        return <Music className="h-4 w-4" />
      case "video":
        if (isTranscribing) {
          return (
            <div className="relative h-4 w-4">
              <div className="absolute inset-0 animate-spin">
                <div className="h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
              </div>
            </div>
          )
        }
        return <Video className="h-4 w-4" />
      case "image":
        return <ImageIcon className="h-4 w-4" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }

  useEffect(() => {
    const text = "Welcome back, Counselor Gupta"
    let index = 0

    const timer = setInterval(() => {
      if (index <= text.length) {
        setDisplayedText(text.slice(0, index))
        index++
      } else {
        clearInterval(timer)
      }
    }, 80)

    return () => clearInterval(timer)
  }, [])

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files) return

    Array.from(files).forEach((file) => {
      const isDuplicate = uploadedFiles.some(
        (existingFile) =>
          existingFile.name === file.name && existingFile.size === `${(file.size / 1024 / 1024).toFixed(1)} MB`,
      )

      if (isDuplicate) {
        toast({
          title: "Duplicate File",
          description: "This file has already been uploaded.",
          variant: "destructive",
        })
        return
      }

      let fileType = "document"
      const extension = file.name.split(".").pop()?.toLowerCase()

      if (extension === "pdf") {
        fileType = "pdf"
      } else if (["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(extension || "")) {
        fileType = "image"
      } else if (["mp4", "avi", "webm", "mpv", "ogg"].includes(extension || "")) {
        fileType = "video"
      } else if (["wav", "mp3", "flac", "aiff", "aac"].includes(extension || "")) {
        fileType = "audio"
      }

      const newFile: UploadedFile = {
        id: Math.random().toString(36).substr(2, 9),
        name: file.name,
        size: `${(file.size / 1024 / 1024).toFixed(1)} MB`,
        type: fileType,
        uploadedAt: new Date(),
        isTranscribing: isTranscribableFile(fileType),
        transcriptionProgress: isTranscribableFile(fileType) ? 0 : undefined,
      }

      setUploadedFiles((prev) => [...prev, newFile])

      if (isTranscribableFile(fileType)) {
        let progress = 0
        const transcriptionTimer = setInterval(() => {
          progress += Math.random() * 15 + 5

          if (progress >= 100) {
            progress = 100
            clearInterval(transcriptionTimer)

            setUploadedFiles((prev) =>
              prev.map((f) => (f.id === newFile.id ? { ...f, isTranscribing: false, transcriptionProgress: 100 } : f)),
            )
          } else {
            setUploadedFiles((prev) =>
              prev.map((f) => (f.id === newFile.id ? { ...f, transcriptionProgress: progress } : f)),
            )
          }
        }, 200)
      }
    })

    event.target.value = ""
  }

  const handleKeyDown = (e: React.KeyboardEvent, inputId: string) => {
    if (e.key === "Enter" && e.shiftKey) {
      e.preventDefault()
      if (queryInputs.length < 2) {
        const newInput: QueryInput = {
          id: Math.random().toString(36).substr(2, 9),
          text: "",
        }
        setQueryInputs((prev) => [...prev, newInput])
        setQueryMode("manual")
      }
    } else if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSubmitQuery(inputId)
    }
  }

  const handleSubmitQuery = (inputId?: string) => {
    if (queryState === "input") {
      if (queryMode === "auto" && queryInputs.length === 1) {
        const inputText = queryInputs[0].text.trim()
        if (inputText) {
          const extracted = extractQueries(inputText)
          setExtractedQueries(extracted)
          setQueryState("extracted")
        }
        return
      } else {
        submitQueries()
      }
    } else if (queryState === "extracted") {
      submitExtractedQueries()
    }
  }

  const generateCombinedAnalysis = (queryId: string) => {
    setQueries((prevQueries) =>
      prevQueries.map((q) =>
        q.id === queryId ? { ...q, combinedAnalysisRequested: true, combinedAnalysisProgress: 0 } : q,
      ),
    )

    let progress = 0
    const progressInterval = setInterval(() => {
      progress += Math.random() * 15 + 5
      if (progress >= 100) {
        progress = 100
        clearInterval(progressInterval)

        setTimeout(() => {
          setQueries((prevQueries) =>
            prevQueries.map((q) =>
              q.id === queryId
                ? {
                    ...q,
                    combinedAnalysisProgress: 100,
                    summary: `Summary: Cross-referencing all ${uploadedFiles.length} files reveals consistent patterns and ${Math.floor(Math.random() * 3) + 2} key legal precedents relevant to your query.`,
                  }
                : q,
            ),
          )
        }, 500)
      } else {
        setQueries((prevQueries) =>
          prevQueries.map((q) => (q.id === queryId ? { ...q, combinedAnalysisProgress: Math.min(progress, 100) } : q)),
        )
      }
    }, 200)
  }

  const submitExtractedQueries = () => {
    const validQueries = extractedQueries.filter((q) => q.text.trim())
    if (validQueries.length === 0 || uploadedFiles.length === 0) return

    const sessionId = Date.now().toString()

    validQueries.forEach((extractedQuery) => {
      const newQuery: Query = {
        id: Math.random().toString(36).substr(2, 9),
        text: extractedQuery.text.trim(),
        status: "pending",
        sessionId,
        combinedAnalysisRequested: false,
        combinedAnalysisProgress: 0,
        fileResults: uploadedFiles.map((file) => ({
          fileId: file.id,
          fileName: file.name,
          result: "",
          status: "pending" as const,
          progress: 0,
        })),
      }
      setQueries((prev) => [...prev, newQuery])

      setTimeout(() => {
        setQueries((prevQueries) => prevQueries.map((q) => (q.id === newQuery.id ? { ...q, status: "processing" } : q)))

        newQuery.fileResults?.forEach((fileResult, index) => {
          setTimeout(
            () => {
              setQueries((prevQueries) =>
                prevQueries.map((q) =>
                  q.id === newQuery.id
                    ? {
                        ...q,
                        fileResults: q.fileResults?.map((fr) =>
                          fr.fileId === fileResult.fileId ? { ...fr, status: "processing" as const, progress: 0 } : fr,
                        ),
                      }
                    : q,
                ),
              )

              let progress = 0
              const progressInterval = setInterval(() => {
                progress += Math.random() * 10 + 5
                if (progress >= 85) {
                  clearInterval(progressInterval)

                  setQueries((prevQueries) =>
                    prevQueries.map((q) =>
                      q.id === newQuery.id
                        ? {
                            ...q,
                            fileResults: q.fileResults?.map((fr) =>
                              fr.fileId === fileResult.fileId
                                ? { ...fr, status: "anti-hallucination" as const, progress: 90 }
                                : fr,
                            ),
                          }
                        : q,
                    ),
                  )

                  setTimeout(() => {
                    setQueries((prevQueries) =>
                      prevQueries.map((q) =>
                        q.id === newQuery.id
                          ? {
                              ...q,
                              fileResults: q.fileResults?.map((fr) =>
                                fr.fileId === fileResult.fileId
                                  ? {
                                      ...fr,
                                      status: "completed" as const,
                                      progress: 100,
                                      result: `Analysis of "${fileResult.fileName}" for query "${newQuery.text}" - Found ${Math.floor(Math.random() * 5) + 1} relevant sections. Key findings include procedural elements and evidence references.`,
                                    }
                                  : fr,
                              ),
                            }
                          : q,
                      ),
                    )

                    if (index === newQuery.fileResults!.length - 1) {
                      setTimeout(() => {
                        setQueries((prevQueries) =>
                          prevQueries.map((q) => (q.id === newQuery.id ? { ...q, status: "completed" as const } : q)),
                        )
                      }, 500)
                    }
                  }, 800)
                } else {
                  setQueries((prevQueries) =>
                    prevQueries.map((q) =>
                      q.id === newQuery.id
                        ? {
                            ...q,
                            fileResults: q.fileResults?.map((fr) =>
                              fr.fileId === fileResult.fileId ? { ...fr, progress: Math.min(progress, 85) } : fr,
                            ),
                          }
                        : q,
                    ),
                  )
                }
              }, 150)
            },
            500 + index * 300,
          )
        })
      }, 500)
    })

    setQueryState("input")
    setExtractedQueries([])
    setQueryInputs([{ id: Math.random().toString(36).substr(2, 9), text: "" }])
    setQueryMode("auto")
  }

  const submitQueries = () => {
    const queriesToSubmit = queryInputs.filter((input) => input.text.trim())
    if (queriesToSubmit.length === 0 || uploadedFiles.length === 0) return

    const sessionId = Date.now().toString()

    queriesToSubmit.forEach((targetInput) => {
      const newQuery: Query = {
        id: Math.random().toString(36).substr(2, 9),
        text: targetInput.text.trim(),
        status: "pending",
        sessionId,
        combinedAnalysisRequested: false,
        combinedAnalysisProgress: 0,
        fileResults: uploadedFiles.map((file) => ({
          fileId: file.id,
          fileName: file.name,
          result: "",
          status: "pending" as const,
          progress: 0,
        })),
      }
      setQueries((prev) => [...prev, newQuery])

      setTimeout(() => {
        setQueries((prevQueries) => prevQueries.map((q) => (q.id === newQuery.id ? { ...q, status: "processing" } : q)))

        newQuery.fileResults?.forEach((fileResult, index) => {
          setTimeout(
            () => {
              setQueries((prevQueries) =>
                prevQueries.map((q) =>
                  q.id === newQuery.id
                    ? {
                        ...q,
                        fileResults: q.fileResults?.map((fr) =>
                          fr.fileId === fileResult.fileId ? { ...fr, status: "processing" as const, progress: 0 } : fr,
                        ),
                      }
                    : q,
                ),
              )

              let progress = 0
              const progressInterval = setInterval(() => {
                progress += Math.random() * 10 + 5
                if (progress >= 85) {
                  clearInterval(progressInterval)

                  setQueries((prevQueries) =>
                    prevQueries.map((q) =>
                      q.id === newQuery.id
                        ? {
                            ...q,
                            fileResults: q.fileResults?.map((fr) =>
                              fr.fileId === fileResult.fileId
                                ? { ...fr, status: "anti-hallucination" as const, progress: 90 }
                                : fr,
                            ),
                          }
                        : q,
                    ),
                  )

                  setTimeout(() => {
                    setQueries((prevQueries) =>
                      prevQueries.map((q) =>
                        q.id === newQuery.id
                          ? {
                              ...q,
                              fileResults: q.fileResults?.map((fr) =>
                                fr.fileId === fileResult.fileId
                                  ? {
                                      ...fr,
                                      status: "completed" as const,
                                      progress: 100,
                                      result: `Analysis of "${fileResult.fileName}" for query "${newQuery.text}" - Found ${Math.floor(Math.random() * 5) + 1} relevant sections. Key findings include procedural elements and evidence references.`,
                                    }
                                  : fr,
                              ),
                            }
                          : q,
                      ),
                    )

                    if (index === newQuery.fileResults!.length - 1) {
                      setTimeout(() => {
                        setQueries((prevQueries) =>
                          prevQueries.map((q) => (q.id === newQuery.id ? { ...q, status: "completed" as const } : q)),
                        )
                      }, 500)
                    }
                  }, 800)
                } else {
                  setQueries((prevQueries) =>
                    prevQueries.map((q) =>
                      q.id === newQuery.id
                        ? {
                            ...q,
                            fileResults: q.fileResults?.map((fr) =>
                              fr.fileId === fileResult.fileId ? { ...fr, progress: Math.min(progress, 85) } : fr,
                            ),
                          }
                        : q,
                    ),
                  )
                }
              }, 150)
            },
            500 + index * 300,
          )
        })
      }, 500)
    })

    setQueryInputs([{ id: Math.random().toString(36).substr(2, 9), text: "" }])
    setQueryMode("auto")
  }

  const updateQueryInput = (inputId: string, text: string) => {
    setQueryInputs((prev) => prev.map((input) => (input.id === inputId ? { ...input, text } : input)))
  }

  const removeQueryInput = (inputId: string) => {
    if (queryInputs.length > 1) {
      setQueryInputs((prev) => prev.filter((input) => input.id !== inputId))
      if (queryInputs.length === 2) {
        setQueryMode("auto")
      }
    }
  }

  const updateExtractedQuery = (queryId: string, text: string) => {
    setExtractedQueries((prev) => prev.map((q) => (q.id === queryId ? { ...q, text } : q)))
  }

  const removeExtractedQuery = (queryId: string) => {
    setExtractedQueries((prev) => prev.filter((q) => q.id !== queryId))
  }

  const handleSelectFromFavorites = (query: string) => {
    const newQuery: ExtractedQuery = {
      id: Math.random().toString(36).substr(2, 9),
      text: query,
      questionNumber: extractedQueries.length + 1,
    }
    setExtractedQueries((prev) => [...prev, newQuery])
  }

  const cancelExtraction = () => {
    setQueryState("input")
    setExtractedQueries([])
  }

  const handleNewChat = () => {
    setUploadedFiles([])
    setQueries([])
    setQueryInputs([{ id: Math.random().toString(36).substr(2, 9), text: "" }])
    setQueryMode("auto")
    setQueryState("input")
    setExtractedQueries([])
  }

  const getSourceAnalysisData = () => {
    const sourceMap = new Map<
      string,
      {
        fileName: string
        fileId: string
        queries: Query[]
        allCompleted: boolean
        hasAnalysis: boolean
      }
    >()

    queries.forEach((query) => {
      query.fileResults?.forEach((fileResult) => {
        const key = fileResult.fileId
        if (!sourceMap.has(key)) {
          sourceMap.set(key, {
            fileName: fileResult.fileName,
            fileId: fileResult.fileId,
            queries: [],
            allCompleted: false,
            hasAnalysis: false,
          })
        }
        const sourceData = sourceMap.get(key)!
        sourceData.queries.push(query)

        const allQueriesCompleted = sourceData.queries.every(
          (q) => q.fileResults?.find((fr) => fr.fileId === key)?.status === "completed",
        )
        sourceData.allCompleted = allQueriesCompleted

        sourceData.hasAnalysis = sourceData.queries.some((q) => q.summary)
      })
    })

    return Array.from(sourceMap.values())
  }

  const generateSourceCombinedAnalysis = (fileId: string) => {
    const sourceData = getSourceAnalysisData().find((s) => s.fileId === fileId)
    if (!sourceData) return

    setProcessingSourceIds((prev) => new Set([...prev, fileId]))

    const firstQuery = sourceData.queries[0]
    if (firstQuery) {
      setQueries((prevQueries) =>
        prevQueries.map((q) =>
          q.id === firstQuery.id ? { ...q, combinedAnalysisRequested: true, combinedAnalysisProgress: 0 } : q,
        ),
      )

      let progress = 0
      const progressInterval = setInterval(() => {
        progress += Math.random() * 15 + 5
        if (progress >= 100) {
          progress = 100
          clearInterval(progressInterval)

          setTimeout(() => {
            setQueries((prevQueries) =>
              prevQueries.map((q) =>
                q.id === firstQuery.id
                  ? {
                      ...q,
                      combinedAnalysisProgress: 100,
                      summary: `Summary: Cross-referencing ${sourceData.queries.length} queries across "${sourceData.fileName}" reveals consistent patterns and ${Math.floor(Math.random() * 3) + 2} key legal precedents relevant to your analysis.`,
                    }
                  : q,
              ),
            )
            setProcessingSourceIds((prev) => {
              const newSet = new Set(prev)
              newSet.delete(fileId)
              return newSet
            })
          }, 500)
        } else {
          setQueries((prevQueries) =>
            prevQueries.map((q) =>
              q.id === firstQuery.id ? { ...q, combinedAnalysisProgress: Math.min(progress, 100) } : q,
            ),
          )
        }
      }, 200)
    }
  }

  const generateAllCombinedAnalysis = () => {
    const eligibleSources = getSourceAnalysisData().filter(
      (sourceData) => sourceData.allCompleted && !sourceData.hasAnalysis && !processingSourceIds.has(sourceData.fileId),
    )

    eligibleSources.forEach((sourceData) => {
      generateSourceCombinedAnalysis(sourceData.fileId)
    })
  }

  const addExtractedQuery = () => {
    const newQuery: ExtractedQuery = {
      id: Math.random().toString(36).substr(2, 9),
      text: "",
      questionNumber: extractedQueries.length + 1,
    }
    setExtractedQueries((prev) => [...prev, newQuery])
  }

  const handleVoiceInput = async () => {
    if (recordingState === "recording") {
      setRecordingState("processing")

      // Simulate processing time with reduced duration for better UX
      setTimeout(() => {
        const mockTranscriptions = [
          "What are the key legal precedents in this case?",
          "Analyze the evidence presented in the discovery documents",
          "What are the potential defenses available to the defendant?",
          "Summarize the main arguments from both parties",
          "What damages are being sought in this lawsuit?",
        ]

        const randomTranscription = mockTranscriptions[Math.floor(Math.random() * mockTranscriptions.length)]
        updateQueryInput(queryInputs[0].id, randomTranscription)

        if (queryMode === "auto") {
          setTimeout(() => {
            handleSubmitQuery()
          }, 300)
        }

        setRecordingState("idle")
      }, 1500) // Reduced processing time from 2000ms to 1500ms
    } else {
      setRecordingState("recording")
    }
  }

  return (
    <div className="flex h-screen bg-background text-foreground">
      <Sidebar sidebarOpen={sidebarOpen} onNewChat={handleNewChat} />

      <div className="flex-1 flex flex-col">
        <div className="h-12 flex items-center justify-between px-4 border-b border-border">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="text-muted-foreground hover:text-foreground"
            >
              {sidebarOpen ? <ChevronLeft className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
            </Button>
            <h1 className="text-lg font-semibold text-balance">{displayedText}</h1>
          </div>
          <Button variant="outline" size="sm" onClick={() => fileInputRef.current?.click()}>
            <Plus className="h-4 w-4 mr-2" />
            Add Files
          </Button>
        </div>

        <div className="flex-1 flex relative">
          <div className="flex-1 flex flex-col">
            {uploadedFiles.length === 0 ? (
              <div className="flex-1 flex items-center justify-center p-8">
                <Card
                  className="w-full max-w-md p-8 text-center border-dashed border-2 hover:border-primary/50 transition-colors cursor-pointer"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <div className="mb-4">
                    <Upload className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                    <h3 className="text-lg font-semibold mb-2">Upload Case Files</h3>
                    <p className="text-muted-foreground text-sm text-pretty">
                      Upload files (PDFs, audio, video) to begin analysis.
                    </p>
                    <p className="text-muted-foreground text-sm text-pretty mt-1">
                      All files are processed locally for security.
                    </p>
                  </div>
                  <Button
                    onClick={(e) => {
                      e.stopPropagation()
                      fileInputRef.current?.click()
                    }}
                    className="w-full h-12 text-base font-medium bg-primary hover:bg-primary/90 border-0"
                    size="lg"
                  >
                    <Plus className="h-5 w-5 mr-2" />
                    Select Files
                  </Button>
                </Card>
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept=".pdf,audio/*,video/*,image/*"
                  onChange={handleFileUpload}
                  className="hidden"
                />
              </div>
            ) : (
              <div className="flex-1 flex flex-col relative">
                {queries.length === 0 ? (
                  <div className="flex-1 flex items-start justify-center pt-16 p-8">
                    <div className="text-center max-w-md">
                      <Search className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-semibold mb-2">Ready to Analyze</h3>
                      <p className="text-muted-foreground text-sm text-pretty">
                        Your files have been uploaded. Ask questions about your case files using the query box below.
                      </p>
                    </div>
                  </div>
                ) : (
                  <ScrollArea className="flex-1 pb-48">
                    <div className="max-w-4xl mx-auto space-y-4 p-3">
                      {(() => {
                        const groupedQueries = queries.reduce(
                          (acc, query) => {
                            if (!acc[query.sessionId]) {
                              acc[query.sessionId] = []
                            }
                            acc[query.sessionId].push(query)
                            return acc
                          },
                          {} as Record<string, Query[]>,
                        )

                        const sessionIds = Object.keys(groupedQueries).sort()

                        return sessionIds.map((sessionId, sessionIndex) => (
                          <div key={sessionId}>
                            {sessionIndex > 0 && (
                              <div className="flex items-center gap-3 my-6">
                                <div className="flex-1 h-px bg-border"></div>
                                <div className="text-xs text-muted-foreground bg-background px-2">
                                  {new Date(Number.parseInt(sessionId)).toLocaleString("en-US", {
                                    month: "short",
                                    day: "numeric",
                                    hour: "numeric",
                                    minute: "2-digit",
                                    hour12: true,
                                  })}
                                </div>
                                <div className="flex-1 h-px bg-border"></div>
                              </div>
                            )}

                            {groupedQueries[sessionId].map((query) => (
                              <div key={query.id} className="space-y-2.5 mb-4">
                                <div className="flex items-center gap-2 mb-2">
                                  <Search className="h-4 w-4 text-primary" />
                                  <h3 className="text-sm font-semibold">{query.text}</h3>
                                </div>

                                <div className="space-y-1.5">
                                  {query.fileResults?.map((fileResult) => (
                                    <Card key={fileResult.fileId} className="p-2.5">
                                      <div className="flex items-start gap-2">
                                        {getFileIcon(
                                          uploadedFiles.find((f) => f.id === fileResult.fileId)?.type || "document",
                                          uploadedFiles.find((f) => f.id === fileResult.fileId)?.isTranscribing,
                                          uploadedFiles.find((f) => f.id === fileResult.fileId)?.transcriptionProgress,
                                        )}
                                        <div className="flex-1 min-w-0">
                                          <div className="flex items-center gap-2 mb-0.5">
                                            <h4 className="font-medium text-xs truncate">{fileResult.fileName}</h4>
                                            <Badge variant="outline" className="text-xs px-1 py-0">
                                              {uploadedFiles.find((f) => f.id === fileResult.fileId)?.size}
                                            </Badge>
                                          </div>

                                          {fileResult.status === "pending" && (
                                            <div className="flex items-center gap-2 text-muted-foreground">
                                              <div className="w-1.5 h-1.5 bg-muted-foreground/40 rounded-full animate-pulse"></div>
                                              <span className="text-xs">Queued for analysis...</span>
                                            </div>
                                          )}

                                          {fileResult.status === "processing" && (
                                            <div className="flex items-center gap-2 text-muted-foreground">
                                              <div className="flex gap-0.5">
                                                <div className="w-1.5 h-1.5 bg-muted-foreground/60 rounded-full animate-bounce"></div>
                                                <div
                                                  className="w-1.5 h-1.5 bg-muted-foreground/60 rounded-full animate-bounce"
                                                  style={{ animationDelay: "0.1s" }}
                                                ></div>
                                                <div
                                                  className="w-1.5 h-1.5 bg-muted-foreground/60 rounded-full animate-bounce"
                                                  style={{ animationDelay: "0.2s" }}
                                                ></div>
                                              </div>
                                              <span className="text-xs">Analyzing document...</span>
                                            </div>
                                          )}

                                          {fileResult.status === "anti-hallucination" && (
                                            <div className="flex items-center gap-2 text-muted-foreground">
                                              <div className="flex gap-0.5">
                                                <div className="w-1.5 h-1.5 bg-orange-500/60 rounded-full animate-pulse"></div>
                                                <div
                                                  className="w-1.5 h-1.5 bg-orange-500/60 rounded-full animate-pulse"
                                                  style={{ animationDelay: "0.2s" }}
                                                ></div>
                                              </div>
                                              <span className="text-xs">Verifying accuracy...</span>
                                            </div>
                                          )}

                                          {fileResult.status === "completed" && (
                                            <p className="text-xs text-muted-foreground leading-relaxed">
                                              {fileResult.result}
                                            </p>
                                          )}
                                        </div>

                                        <div className="flex-shrink-0">
                                          <ProcessingBar progress={fileResult.progress} status={fileResult.status} />
                                        </div>
                                      </div>
                                    </Card>
                                  ))}
                                </div>
                              </div>
                            ))}
                          </div>
                        ))
                      })()}

                      {getSourceAnalysisData().map((sourceData) => (
                        <div key={sourceData.fileId}>
                          {sourceData.queries.some((q) => q.combinedAnalysisRequested || q.summary) && (
                            <Card className="p-2.5 bg-primary/5 border-primary/20 mt-2.5">
                              <div className="flex items-start gap-2">
                                <div className="w-1.5 h-1.5 bg-primary rounded-full mt-1.5"></div>
                                <div className="flex-1">
                                  <div className="flex items-center justify-between mb-0.5">
                                    <h4 className="font-medium text-xs text-primary">
                                      Combined Analysis - {sourceData.fileName}
                                    </h4>
                                    {sourceData.queries.some((q) => q.combinedAnalysisRequested && !q.summary) && (
                                      <CombinedAnalysisBar
                                        progress={
                                          sourceData.queries.find((q) => q.combinedAnalysisRequested)
                                            ?.combinedAnalysisProgress || 0
                                        }
                                      />
                                    )}
                                  </div>
                                  {sourceData.queries.find((q) => q.summary)?.summary ? (
                                    <p className="text-xs leading-relaxed">
                                      {sourceData.queries.find((q) => q.summary)?.summary}
                                    </p>
                                  ) : (
                                    <p className="text-xs text-muted-foreground">
                                      Generating comprehensive analysis...
                                    </p>
                                  )}
                                </div>
                              </div>
                            </Card>
                          )}
                        </div>
                      ))}

                      {(() => {
                        const eligibleSources = getSourceAnalysisData().filter(
                          (sourceData) => sourceData.allCompleted && !sourceData.hasAnalysis,
                        )

                        if (eligibleSources.length === 0) return null

                        const totalQueries = eligibleSources.reduce((sum, source) => sum + source.queries.length, 0)
                        const totalFiles = eligibleSources.length

                        // Only show combined analysis if there are multiple queries OR multiple files
                        if (totalQueries <= 1 && totalFiles <= 1) return null

                        return (
                          <div className="flex flex-wrap justify-center gap-2 pt-3">
                            {eligibleSources.length > 1 && (
                              <Button
                                onClick={generateAllCombinedAnalysis}
                                variant="default"
                                size="sm"
                                className="text-xs h-7 bg-primary hover:bg-primary/90 text-primary-foreground"
                                disabled={eligibleSources.every((source) => processingSourceIds.has(source.fileId))}
                              >
                                <BarChart3 className="h-3 w-3 mr-1" />
                                Generate All Combined Analysis
                              </Button>
                            )}
                            {eligibleSources.map((sourceData) => {
                              const isProcessing = processingSourceIds.has(sourceData.fileId)
                              return (
                                <Button
                                  key={sourceData.fileId}
                                  onClick={() => generateSourceCombinedAnalysis(sourceData.fileId)}
                                  variant="outline"
                                  size="sm"
                                  className={`text-xs h-7 ${
                                    isProcessing
                                      ? "bg-primary/10 border-primary text-primary"
                                      : "bg-transparent border-primary/30 hover:bg-primary/5 text-primary"
                                  }`}
                                  disabled={isProcessing}
                                >
                                  <BarChart3 className="h-3 w-3 mr-1" />
                                  {isProcessing
                                    ? "Processing..."
                                    : `Generate Combined Analysis for ${sourceData.fileName}`}
                                </Button>
                              )
                            })}
                          </div>
                        )
                      })()}
                    </div>
                  </ScrollArea>
                )}

                <div className="absolute bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm">
                  <div className="p-2.5">
                    <div className="max-w-4xl mx-auto">
                      <div className="mb-1.5">
                        <div className="flex flex-wrap gap-1">
                          {uploadedFiles.map((file) => (
                            <Badge
                              key={file.id}
                              variant="secondary"
                              className={`flex items-center gap-1 px-1.5 py-0.5 text-xs transition-colors ${
                                isTranscribableFile(file.type)
                                  ? file.isTranscribing
                                    ? "bg-slate-600/70 hover:bg-slate-600/80 text-slate-200"
                                    : "bg-slate-500/50 hover:bg-slate-500/60 text-slate-300"
                                  : "bg-muted/50 hover:bg-muted/70"
                              }`}
                            >
                              {getFileIcon(file.type, file.isTranscribing, file.transcriptionProgress)}
                              <span className="max-w-[80px] truncate">{file.name}</span>
                              <span className="text-muted-foreground/70 text-xs">{file.size}</span>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => removeFile(file.id)}
                                className="h-3 w-3 p-0 text-muted-foreground/60 hover:text-destructive ml-0.5"
                              >
                                <X className="h-2 w-2" />
                              </Button>
                            </Badge>
                          ))}
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => fileInputRef.current?.click()}
                            className="h-5 px-1.5 text-xs text-muted-foreground hover:text-foreground border border-dashed border-muted-foreground/30 rounded-md"
                          >
                            <Plus className="h-2.5 w-2.5 mr-0.5" />
                            Add
                          </Button>
                        </div>
                      </div>

                      {queryState === "extracted" ? (
                        <div className="bg-card border border-border rounded-xl shadow-sm">
                          <div className="p-3">
                            <div className="mb-3">
                              <h3 className="text-sm font-semibold mb-1">Extracted Questions</h3>
                              <p className="text-xs text-muted-foreground">
                                Review and edit the questions extracted from your input:
                              </p>
                            </div>

                            <div className="space-y-1 mb-3">
                              {extractedQueries.map((query) => (
                                <div key={query.id} className="relative">
                                  <div className="flex items-start gap-2">
                                    <div className="text-xs text-muted-foreground pt-1 min-w-0 flex-shrink-0">
                                      Question {query.questionNumber}
                                    </div>
                                    <div className="flex-1 min-w-0">
                                      <Textarea
                                        value={query.text}
                                        onChange={(e) => updateExtractedQuery(query.id, e.target.value)}
                                        className="min-h-[40px] max-h-[80px] resize-none text-xs border-border/50 focus-visible:ring-1 focus-visible:ring-ring bg-background/50"
                                        rows={2}
                                      />
                                    </div>
                                    <Button
                                      onClick={() => removeExtractedQuery(query.id)}
                                      variant="ghost"
                                      size="sm"
                                      className="h-6 w-6 p-0 text-muted-foreground/60 hover:text-muted-foreground flex-shrink-0"
                                    >
                                      <X className="h-3 w-3" />
                                    </Button>
                                  </div>
                                </div>
                              ))}
                            </div>

                            <div className="flex items-center justify-between pt-2 border-t border-border">
                              <div className="flex gap-2">
                                <Button
                                  onClick={addExtractedQuery}
                                  variant="outline"
                                  size="sm"
                                  className="text-xs h-7 bg-transparent"
                                >
                                  <Plus className="h-3 w-3 mr-1" />
                                  Add question
                                </Button>
                                <Button
                                  onClick={() => setFavoritesModalOpen(true)}
                                  variant="outline"
                                  size="sm"
                                  className="text-xs h-7 bg-transparent"
                                >
                                  <svg className="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                    />
                                  </svg>
                                  Add from favorites
                                </Button>
                              </div>
                              <div className="flex gap-2">
                                <Button onClick={cancelExtraction} variant="ghost" size="sm" className="text-xs h-7">
                                  Cancel
                                </Button>
                                <Button
                                  onClick={submitExtractedQueries}
                                  disabled={!extractedQueries.some((q) => q.text.trim())}
                                  className="text-xs h-7 bg-primary hover:bg-primary/90"
                                  size="sm"
                                >
                                  Submit request
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="bg-card border border-border rounded-xl shadow-sm">
                          <div className="p-3">
                            <div className="space-y-2">
                              <ScrollArea className={queryInputs.length > 1 ? "max-h-[100px] w-full" : ""}>
                                <div className="space-y-2 pr-2">
                                  {queryInputs.map((input, index) => (
                                    <div key={input.id} className="flex gap-2 items-start group">
                                      <div className="flex-1 min-w-0 relative">
                                        <Textarea
                                          ref={index === 0 ? textareaRef : undefined}
                                          value={input.text}
                                          onChange={(e) => updateQueryInput(input.id, e.target.value)}
                                          onKeyDown={(e) => handleKeyDown(e, input.id)}
                                          placeholder={
                                            index === 0
                                              ? queryMode === "auto"
                                                ? "Describe what you want to analyze in your case files..."
                                                : "Ask a question about your case files..."
                                              : `Query ${index + 1}...`
                                          }
                                          className={`min-h-[36px] max-h-[72px] resize-none shadow-none focus-visible:ring-1 focus-visible:ring-ring text-xs ${
                                            queryInputs.length === 1
                                              ? "border-0 bg-transparent p-0 placeholder:text-muted-foreground focus-visible:ring-0"
                                              : `border border-border rounded-md bg-background p-2 ${queryInputs.length > 1 ? "pr-8" : ""}`
                                          }`}
                                          rows={1}
                                        />
                                        {queryInputs.length > 1 && (
                                          <Button
                                            onClick={() => removeQueryInput(input.id)}
                                            variant="ghost"
                                            size="sm"
                                            className="absolute right-1.5 top-1/2 -translate-y-1/2 h-5 w-5 p-0 text-muted-foreground/60 hover:text-muted-foreground hover:bg-muted/80 opacity-70 group-hover:opacity-100 transition-all duration-200"
                                          >
                                            <X className="h-2.5 w-2.5" />
                                          </Button>
                                        )}
                                      </div>
                                      <div className="flex items-center gap-1.5 flex-shrink-0">
                                        {index === 0 && queryInputs.length === 1 && (
                                          <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={handleVoiceInput}
                                            disabled={recordingState === "processing"}
                                            className={`h-7 w-7 p-0 transition-all duration-300 ease-in-out ${
                                              recordingState === "recording"
                                                ? "text-red-500 bg-red-50/50 hover:bg-red-100/50 scale-105"
                                                : recordingState === "processing"
                                                  ? "text-blue-500 bg-blue-50/50"
                                                  : "text-muted-foreground hover:text-foreground hover:bg-accent/50 hover:scale-105"
                                            }`}
                                            title={
                                              recordingState === "recording"
                                                ? "Click to stop recording"
                                                : recordingState === "processing"
                                                  ? "Processing voice input..."
                                                  : "Click to start voice input"
                                            }
                                          >
                                            {recordingState === "processing" ? (
                                              <div className="h-3.5 w-3.5 border-2 border-current border-t-transparent rounded-full animate-spin" />
                                            ) : (
                                              <Mic
                                                className={`h-3.5 w-3.5 transition-transform duration-200 ${
                                                  recordingState === "recording" ? "animate-pulse scale-110" : ""
                                                }`}
                                              />
                                            )}
                                          </Button>
                                        )}
                                        {((queryInputs.length === 1 && index === 0) ||
                                          (queryInputs.length > 1 && index === queryInputs.length - 1)) && (
                                          <Button
                                            onClick={() => handleSubmitQuery()}
                                            disabled={!queryInputs.some((input) => input.text.trim())}
                                            className="h-8 px-3 bg-white hover:bg-gray-50 text-black border border-gray-300 shadow-sm text-xs"
                                            size="sm"
                                          >
                                            <Send className="h-3.5 w-3.5 stroke-black" />
                                          </Button>
                                        )}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </ScrollArea>
                            </div>

                            <div className="mt-1.5 pt-1.5 border-t border-border">
                              <div className="flex items-center gap-2">
                                <Button
                                  onClick={() => setQueryMode(queryMode === "auto" ? "manual" : "auto")}
                                  variant="outline"
                                  size="sm"
                                  className="h-5 px-2 text-xs bg-transparent border-muted-foreground/30 hover:bg-muted/50"
                                >
                                  {queryMode === "auto" ? "Auto" : "Manual"}
                                </Button>
                                <p className="text-xs text-muted-foreground">
                                  {queryMode === "auto"
                                    ? "Press Enter to submit, Shift + Enter for manual mode"
                                    : "Press Shift + Enter for new query, Enter to submit"}
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    <input
                      ref={fileInputRef}
                      type="file"
                      multiple
                      accept=".pdf,audio/*,video/*,image/*"
                      onChange={handleFileUpload}
                      className="hidden"
                    />
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      <FavoritesModal
        isOpen={favoritesModalOpen}
        onClose={() => setFavoritesModalOpen(false)}
        onSelectQuery={handleSelectFromFavorites}
        currentQuery={extractedQueries.length > 0 ? extractedQueries[extractedQueries.length - 1]?.text : ""}
      />
    </div>
  )
}

export default LegalCaseAnalysis
